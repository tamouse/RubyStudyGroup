#+STARTUP: content
* Syllabus

** Week 1

*** Objectives

    Have a full, working Ruby development environment.

    Understand the basics of creating, testing, and maintainging Ruby
    software projects.

*** Topics

    - Installation
    - Ruby command line
    - Bundler
    - Gems
    - Rake
    - Pry
    - Creating a project
    - Test Driven Development
    - Using Git

*** Exercises

    - install the Ruby Version Manager, rvm
    - install three essential gems: Pry, Bundler, and Rake
    - create a project as a gem
    - review the structure of files and folders
    - edit the ~.gemspec~
      - specifying project-specific gems
    - write the test that verifies the ~hello_world~ method below
    - write a ~hello_world~ method that takes an argument and returns
      "hello, " and the contents of the argument.
    - explore what's happening inside with pry
    - initializing git for your project
    - commit versions of the test project

** Week 2

*** Objectives

    Understand data and algorithmic aspects of Ruby.

    Understand ways to organize code.

*** Topics

**** Data

    - Scalars
      - Integers
      - Floats
      - Strings
      - Booleans
      - Symbols
    - Variables
    - Constants

**** Algorithmic essentials

    - Conditionals
    - Iterations
    - Methods

**** Organizing code

    - Classes
    - Modules

*** Exercises

**** Common practices

    - create the exercise as a gem
    - edit the ~.gemspec~
    - write the tests /before/ each method

**** Exercise 2.1 String Length

    Given a string, count the number of characters in the string and
    return that value.

    - use a built-in method to calculate the number characters.
    - stretch: write your own method to calculate the number of
      characters.
    - make sure your tests include strings with spaces, puncutation,
      numbers, as well as letters.
    - make sure you test edge cases and invalid input, such as an
      empty string, a non-string, etc

**** Exercise 2.2 MadLib

     Create methods that:
     - given a template, return the fillin words as an array
     - given the same template and an array of substitute words,
       return the filled in answer.

     Make sure you test edge cases and bad data.

** Week 3

*** Objectives

    Learn how to organize more complex projects.

    Learn the breadth of what comes with Ruby.

    Explore the Enumerable core library package.

*** Topics

   - Organizing files in projects
     - Separation of Concerns
     - Don't Repeat Yourself
     - SOLID

   - Using the core and standard libraries
     - explore the Enumerable package
     - looping: filtering, mapping, reducing
   - Using gems

*** Exercises

**** Exercise 3.1

     Organize classes for a 2-player card game.
     - Game
     - Player
     - Deck
     - Card

** Week 4

*** Objectives

*** Topics

*** Exercises

** Week 5

*** Objectives

*** Topics

*** Exercises

** Week 6

*** Objectives

*** Topics

*** Exercises
